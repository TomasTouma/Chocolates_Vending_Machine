/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.chocolateVendingMachine;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static my.val.ValidationAndCalculationMethods.*;

/**
 * MainScreen class representing the main interface for a Chocolate Vending
 * Machine. This JFrame provides a graphical user interface for customers to
 * insert money, purchase chocolate bars, and receive change. It also includes
 * administrative functionality for stock management.
 *
 * <p>
 * The vending machine supports five types of chocolate bars with different
 * prices and maintains inventory for both products and coins for change
 * calculation.</p>
 *
 * @author Tomasz Touma
 * @version 1.0
 * @since 2024
 */
public class mainScreen extends javax.swing.JFrame {

    public static double moneyInserted = 0.00;// Total money inserted by the user
    public static double machineMoney = 40.00;// Total money in the vending machine
    public static int twixAvb = 10;// Available quantity of Twix chocolate bars
    public static int kitkatAvb = 10;// Available quantity of Kitkat chocolate bars
    public static int marsAvb = 10;// Available quantity of Mars chocolate bars
    public static int kinderAvb = 10;// Available quantity of Kinder chocolate bars
    // ImageIcon for displaying the change when a purchase is made
    //public static ImageIcon iconChange = new ImageIcon("C:\\Users\\tomas\\Documents\\"
    //        + "NetBeansProjects\\ChocolatesVendingMachine\\src\\my\\chocolateVendingMachine\\coinsChange.png");
    public static ImageIcon iconChange = new ImageIcon("./src/my/chocolateVendingMachine/coinsChange.png");
    public static int c10Coins = 20;// Available quantity of 10-cent coins
    public static int c20Coins = 15;// Available quantity of 20-cent coins
    public static int c50Coins = 10;// Available quantity of 50-cent coins
    public static int euro1Coins = 10;// Available quantity of 1-euro coins
    public static int euro2Coins = 10;// Available quantity of 2-euro coins
    public static int withdrawEuro2 = 0;// Count of 2-euro coins to be withdrawn
    public static int withdrawEuro1 = 0;// Count of 1-euro coins to be withdrawn
    public static int withdraw50Cent = 0;// Count of 50-cent coins to be withdrawn
    public static int withdraw20Cent = 0;// Count of 20-cent coins to be withdrawn
    public static int withdraw10Cent = 0;// Count of 10-cent coins to be withdrawn

    /**
     * Creates new form mainScreen
     */
    public mainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonKitKat = new javax.swing.JButton();
        jButtonMars = new javax.swing.JButton();
        jButtonTwix = new javax.swing.JButton();
        jButtonKinder = new javax.swing.JButton();
        jLabelChooseProduct = new javax.swing.JLabel();
        jLabelTwixPrice = new javax.swing.JLabel();
        jLabelKitkatPrice = new javax.swing.JLabel();
        jLabelMarsPrice = new javax.swing.JLabel();
        jLabelKinderPrice = new javax.swing.JLabel();
        jTextFieldKitkatAv = new javax.swing.JTextField();
        jTextFieldMarsAv = new javax.swing.JTextField();
        jTextFieldKinderAv = new javax.swing.JTextField();
        jLabelTwixAv = new javax.swing.JLabel();
        jLabelKitkatAv = new javax.swing.JLabel();
        jLabelMarsAv = new javax.swing.JLabel();
        jLabelKinderAv = new javax.swing.JLabel();
        jTextFieldTwixAv = new javax.swing.JTextField();
        jButtonAddStock = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelInsertCoins = new javax.swing.JLabel();
        jButton10c = new javax.swing.JButton();
        jButton20c = new javax.swing.JButton();
        jButton50c = new javax.swing.JButton();
        jButton€1 = new javax.swing.JButton();
        jButton€2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldInsertedCoins = new javax.swing.JTextField();
        jButtonWithdraw = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chocolate Vending Machine");
        setBackground(new java.awt.Color(12, 192, 223));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(12, 192, 223));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));

        jButtonKitKat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/kitkat (1).png"))); // NOI18N
        jButtonKitKat.setText("KitKat");
        jButtonKitKat.setAlignmentY(0.0F);
        jButtonKitKat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKitKatActionPerformed(evt);
            }
        });

        jButtonMars.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/mars.png"))); // NOI18N
        jButtonMars.setText("Mars");
        jButtonMars.setMaximumSize(new java.awt.Dimension(3907, 2167));
        jButtonMars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMarsActionPerformed(evt);
            }
        });

        jButtonTwix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/twix.png"))); // NOI18N
        jButtonTwix.setText("Twix");
        jButtonTwix.setMaximumSize(new java.awt.Dimension(3897, 2167));
        jButtonTwix.setMinimumSize(new java.awt.Dimension(3897, 2167));
        jButtonTwix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTwixActionPerformed(evt);
            }
        });

        jButtonKinder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/kinder.png"))); // NOI18N
        jButtonKinder.setText("Kinder");
        jButtonKinder.setPreferredSize(new java.awt.Dimension(3904, 2167));
        jButtonKinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKinderActionPerformed(evt);
            }
        });

        jLabelChooseProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelChooseProduct.setText("2. Please Choose a Product");

        jLabelTwixPrice.setText("€1.40");

        jLabelKitkatPrice.setText("€2.20");

        jLabelMarsPrice.setText("€1.40");

        jLabelKinderPrice.setText("€1.60");

        jTextFieldKitkatAv.setBackground(new java.awt.Color(242, 242, 242));
        jTextFieldKitkatAv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldKitkatAv.setText(Integer.toString(kitkatAvb));
        jTextFieldKitkatAv.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldKitkatAv.setEnabled(false);

        jTextFieldMarsAv.setBackground(new java.awt.Color(242, 242, 242));
        jTextFieldMarsAv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldMarsAv.setText(Integer.toString(marsAvb));
        jTextFieldMarsAv.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldMarsAv.setEnabled(false);

        jTextFieldKinderAv.setBackground(new java.awt.Color(242, 242, 242));
        jTextFieldKinderAv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldKinderAv.setText(Integer.toString(kinderAvb));
        jTextFieldKinderAv.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldKinderAv.setEnabled(false);

        jLabelTwixAv.setText("Available:");

        jLabelKitkatAv.setText("Available:");

        jLabelMarsAv.setText("Available:");

        jLabelKinderAv.setText("Available:");

        jTextFieldTwixAv.setBackground(new java.awt.Color(242, 242, 242));
        jTextFieldTwixAv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldTwixAv.setText(Integer.toString(twixAvb)
        );
        jTextFieldTwixAv.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldTwixAv.setEnabled(false);

        jButtonAddStock.setBackground(new java.awt.Color(102, 255, 51));
        jButtonAddStock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonAddStock.setMnemonic('a');
        jButtonAddStock.setText("Add Stock");
        jButtonAddStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddStockActionPerformed(evt);
            }
        });

        jButtonClose.setBackground(new java.awt.Color(255, 0, 0));
        jButtonClose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonClose.setMnemonic('o');
        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabelTwixPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jLabelTwixAv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTwixAv, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jLabelKitkatPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelKitkatAv)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldKitkatAv, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonTwix, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMars, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButtonKitKat, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(9, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabelMarsPrice)
                .addGap(62, 62, 62)
                .addComponent(jLabelMarsAv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldMarsAv, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelKinderPrice)
                .addGap(78, 78, 78)
                .addComponent(jLabelKinderAv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldKinderAv, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelChooseProduct)
                        .addGap(147, 147, 147))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonAddStock)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonClose)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelChooseProduct)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonKitKat, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTwix, javax.swing.GroupLayout.PREFERRED_SIZE, 143, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldKitkatAv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelKitkatAv))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelTwixPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelTwixAv)
                        .addComponent(jTextFieldTwixAv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelKitkatPrice)))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMars, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMarsPrice)
                        .addComponent(jLabelKinderPrice)
                        .addComponent(jTextFieldKinderAv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelKinderAv))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldMarsAv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelMarsAv)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAddStock)
                    .addComponent(jButtonClose))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 490, 460));

        jPanel2.setBackground(new java.awt.Color(12, 192, 223));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));

        jLabelInsertCoins.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelInsertCoins.setText("1. Please Insert Coins");

        jButton10c.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/10c.png"))); // NOI18N
        jButton10c.setText("10c");
        jButton10c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10cActionPerformed(evt);
            }
        });

        jButton20c.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/20c.png"))); // NOI18N
        jButton20c.setText("20c");
        jButton20c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20cActionPerformed(evt);
            }
        });

        jButton50c.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/50c.png"))); // NOI18N
        jButton50c.setText("50c");
        jButton50c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton50cActionPerformed(evt);
            }
        });

        jButton€1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/1Euro.png"))); // NOI18N
        jButton€1.setText("€1");
        jButton€1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton€1ActionPerformed(evt);
            }
        });

        jButton€2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/chocolateVendingMachine/2Euro.png"))); // NOI18N
        jButton€2.setText("€2");
        jButton€2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton€2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Coins Inserted:");

        jTextFieldInsertedCoins.setBackground(new java.awt.Color(12, 192, 223));
        jTextFieldInsertedCoins.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTextFieldInsertedCoins.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldInsertedCoins.setText("€0.0");
        jTextFieldInsertedCoins.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldInsertedCoins.setEnabled(false);

        jButtonWithdraw.setBackground(new java.awt.Color(0, 0, 0));
        jButtonWithdraw.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonWithdraw.setForeground(new java.awt.Color(255, 0, 0));
        jButtonWithdraw.setText("Withdraw Inserted Coins");
        jButtonWithdraw.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonWithdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWithdrawActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton10c, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton20c, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabelInsertCoins))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton50c, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton€1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldInsertedCoins, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jButton€2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButtonWithdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelInsertCoins, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton20c, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10c, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton50c, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton€1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton€2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButtonWithdraw, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldInsertedCoins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(484, 40, 240, 460));

        jPanel3.setBackground(new java.awt.Color(12, 192, 223));

        jLabelHeader.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabelHeader.setText("Chocolate Vending Machine");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(179, Short.MAX_VALUE)
                .addComponent(jLabelHeader)
                .addGap(179, 179, 179))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelHeader)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 724, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Handles the insertion of a €1 coin into the vending machine. Increments
     * the count of €1 coins for withdrawal and updates the total money
     * inserted.
     *
     * @param evt The action event triggered by clicking the €1 button
     */
    private void jButton€1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton€1ActionPerformed
        withdrawEuro1++;// Increment the count of €1 coins to be withdrawn
        euro1Coins += 1;// Increment the available quantity of €1 coins
        moneyInserted += 1;// Increment the total money inserted by the user
        moneyInserted = roundMoney(moneyInserted);// Round the total money inserted to maintain precision
        // Update the displayed money in the user interface
        jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
    }//GEN-LAST:event_jButton€1ActionPerformed

    /**
     * Opens the login frame for administrative stock management. This allows
     * authorized users to add stock to the vending machine.
     *
     * @param evt The action event triggered by clicking the "Add Stock" button
     */
    private void jButtonAddStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddStockActionPerformed
        // Open the login frame when the "Add Stock" button is clicked
        LoginFrame f = new LoginFrame();
        f.setVisible(true);
    }//GEN-LAST:event_jButtonAddStockActionPerformed

    /**
     * Terminates the application when the close button is clicked. Shuts down
     * the entire vending machine program.
     *
     * @param evt The action event triggered by clicking the "Close" button
     */
    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        // Shut down the entire program when the "Close" button is clicked
        System.exit(0);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * Handles the insertion of a 10-cent coin into the vending machine.
     * Increments the count of 10-cent coins for withdrawal and updates the
     * total money inserted.
     *
     * @param evt The action event triggered by clicking the 10-cent button
     */
    private void jButton10cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10cActionPerformed
        withdraw10Cent++;
        c10Coins += 1;
        moneyInserted += 0.1;
        moneyInserted = roundMoney(moneyInserted);
        jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));

    }//GEN-LAST:event_jButton10cActionPerformed

    /**
     * Handles the insertion of a 20-cent coin into the vending machine.
     * Increments the count of 20-cent coins for withdrawal and updates the
     * total money inserted.
     *
     * @param evt The action event triggered by clicking the 20-cent button
     */
    private void jButton20cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20cActionPerformed
        withdraw20Cent++;
        c20Coins += 1;
        moneyInserted += 0.2;
        moneyInserted = roundMoney(moneyInserted);
        jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
    }//GEN-LAST:event_jButton20cActionPerformed

    /**
     * Handles the insertion of a 50-cent coin into the vending machine.
     * Increments the count of 50-cent coins for withdrawal and updates the
     * total money inserted.
     *
     * @param evt The action event triggered by clicking the 50-cent button
     */
    private void jButton50cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton50cActionPerformed
        withdraw50Cent++;
        c50Coins += 1;
        moneyInserted += 0.5;
        moneyInserted = roundMoney(moneyInserted);
        jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
    }//GEN-LAST:event_jButton50cActionPerformed

    /**
     * Handles the insertion of a €2 coin into the vending machine. Increments
     * the count of €2 coins for withdrawal and updates the total money
     * inserted.
     *
     * @param evt The action event triggered by clicking the €2 button
     */
    private void jButton€2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton€2ActionPerformed
        withdrawEuro2++;
        euro2Coins += 1;
        moneyInserted += 2;
        moneyInserted = roundMoney(moneyInserted);
        jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
    }//GEN-LAST:event_jButton€2ActionPerformed

    /**
     * Processes the purchase of a Twix chocolate bar. Validates sufficient
     * funds and stock availability, calculates change, and updates machine
     * inventory and coin counts accordingly.
     *
     * @param evt The action event triggered by clicking the "Twix" button
     */
    private void jButtonTwixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTwixActionPerformed
        // ImageIcon for displaying the Twix product
        ImageIcon iconTwix = new ImageIcon("./src/my/chocolateVendingMachine/twix2.png");
        // Check if there is enough money inserted and Twix is available
        if (moneyInserted >= 1.40 && twixAvb >= 1) {
            machineMoney += moneyInserted;// Update machine money with the money inserted
            double changeTwix = moneyInserted - 1.40;// Calculate the change to be returned to the user
            changeTwix = roundMoney(changeTwix);
            moneyInserted = 0.0;// Reset the money inserted to zero
            jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
            machineMoney = roundMoney(machineMoney);// Round the machine money
            // Display a message to take the change
            JOptionPane.showMessageDialog(null, "Please take your change!" + "\n€" + String.format("%.2f", changeTwix),
                    "Purchase complite", JOptionPane.INFORMATION_MESSAGE, iconChange);
            // Return the change using available coins
            while (changeTwix > 0.0) {
                if (changeTwix >= 2.00 && euro2Coins > 0) {
                    changeTwix -= 2.00;
                    euro2Coins -= 1;
                    machineMoney -= 2.00;
                    changeTwix = roundMoney(changeTwix);

                } else if (changeTwix >= 1.00 && euro1Coins > 0) {
                    changeTwix -= 1.00;
                    euro1Coins -= 1;
                    machineMoney -= 1.00;
                    changeTwix = roundMoney(changeTwix);

                } else if (changeTwix >= 0.50 && c50Coins > 0) {
                    changeTwix -= 0.50;
                    c50Coins -= 1;
                    machineMoney -= 0.50;
                    changeTwix = roundMoney(changeTwix);

                } else if (changeTwix >= 0.20 && c20Coins > 0) {
                    changeTwix -= 0.20;
                    c20Coins -= 1;
                    machineMoney -= 0.20;
                    changeTwix = roundMoney(changeTwix);

                } else if (changeTwix >= 0.10 && c10Coins > 0) {
                    changeTwix -= 0.10;
                    c10Coins -= 1;
                    machineMoney -= 0.10;
                    changeTwix = roundMoney(changeTwix);

                } else { // Break the loop if no suitable coin is found
                    break;
                }
            }
            machineMoney = roundMoney(machineMoney);  // Round the machine money again                 
            twixAvb -= 1;// Update the available quantity of Twix
            jTextFieldTwixAv.setText(Integer.toString(twixAvb));
            // Display a message to collect the Twix
            JOptionPane.showMessageDialog(null, "Please collect your Twix, enjoy!",
                    "Purchase complete", JOptionPane.INFORMATION_MESSAGE, iconTwix);
            // Reset the counts of coins to be withdrawn
            withdrawEuro2 = 0;
            withdrawEuro1 = 0;
            withdraw50Cent = 0;
            withdraw20Cent = 0;
            withdraw10Cent = 0;
        } else {
            // Display an error message if the purchase cannot be completed
            JOptionPane.showMessageDialog(null, "Sorry, the purchase can't be complite due to stock unavailabilty "
                    + "or the inserted money is not enough", "Purchase not complite", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonTwixActionPerformed

    /**
     * Processes the withdrawal of inserted coins without making a purchase.
     * Returns all inserted coins to the user and resets the insertion counters.
     *
     * @param evt The action event triggered by clicking the "Withdraw" button
     */
    private void jButtonWithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWithdrawActionPerformed
        // Check if there is money inserted
        if (moneyInserted > 0.0) {
            while (withdrawEuro2 > 0) {// Withdraw 2-euro coins
                withdrawEuro2--;
                euro2Coins--;
            }
            while (withdrawEuro1 > 0) {// Withdraw 1-euro coins
                withdrawEuro1--;
                euro1Coins--;
            }
            while (withdraw50Cent > 0) {// Withdraw 50-cent coins
                withdraw50Cent--;
                c50Coins--;
            }
            while (withdraw20Cent > 0) {// Withdraw 20-cent coins
                withdraw20Cent--;
                c20Coins--;
            }
            while (withdraw10Cent > 0) {// Withdraw 10-cent coins
                withdraw10Cent--;
                c10Coins--;
            }
            // Display a message to collect the withdrawn coins
            JOptionPane.showMessageDialog(null, "Please collect your coins!" + "\n€" + String.format("%.2f", moneyInserted),
                    "Putchase complite", JOptionPane.INFORMATION_MESSAGE, iconChange);
            moneyInserted = 0.0;// Reset the money inserted to zero

            jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
        } else {
            // Display a warning if there are no coins to withdraw
            JOptionPane.showMessageDialog(null, "No coins to withdraw.", "Withdrawal Incomplete", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jButtonWithdrawActionPerformed

    /**
     * Processes the purchase of a KitKat chocolate bar. Validates sufficient
     * funds and stock availability, calculates change, and updates machine
     * inventory and coin counts accordingly.
     *
     * @param evt The action event triggered by clicking the "KitKat" button
     */
    private void jButtonKitKatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKitKatActionPerformed
        ImageIcon iconkitkat = new ImageIcon("./src/my/chocolateVendingMachine/kitkat2.png");
        if (moneyInserted >= 2.20 && kitkatAvb >= 1) {
            machineMoney += moneyInserted;
            double changeKitkat = moneyInserted - 2.20;
            changeKitkat = roundMoney(changeKitkat);
            moneyInserted = 0.0;
            jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
            machineMoney = roundMoney(machineMoney);
            JOptionPane.showMessageDialog(null, "Please take your change!" + "\n€" + String.format("%.2f", changeKitkat),
                    "Purchase complite", JOptionPane.INFORMATION_MESSAGE, iconChange);
            while (changeKitkat > 0) {
                if (changeKitkat >= 2.00 && euro2Coins > 0) {
                    changeKitkat -= 2.00;
                    euro2Coins -= 1;
                    machineMoney -= 2.00;
                    changeKitkat = roundMoney(changeKitkat);

                } else if (changeKitkat >= 1.00 && euro1Coins > 0) {
                    changeKitkat -= 1.00;
                    euro1Coins -= 1;
                    machineMoney -= 1.00;
                    changeKitkat = roundMoney(changeKitkat);

                } else if (changeKitkat >= 0.50 && c50Coins > 0) {
                    changeKitkat -= 0.50;
                    c50Coins -= 1;
                    machineMoney -= 0.50;
                    changeKitkat = roundMoney(changeKitkat);

                } else if (changeKitkat >= 0.20 && c20Coins > 0) {
                    changeKitkat -= 0.20;
                    c20Coins -= 1;
                    machineMoney -= 0.20;
                    changeKitkat = roundMoney(changeKitkat);

                } else if (changeKitkat >= 0.10 && c10Coins > 0) {
                    changeKitkat -= 0.10;
                    c10Coins -= 1;
                    machineMoney -= 0.10;
                    changeKitkat = roundMoney(changeKitkat);

                } else {
                    break;
                }
            }
            machineMoney = roundMoney(machineMoney);
            kitkatAvb -= 1;
            jTextFieldKitkatAv.setText(Integer.toString(kitkatAvb));
            JOptionPane.showMessageDialog(null, "Please collect your KitKat, enjoy!",
                    "Purchase complete", JOptionPane.INFORMATION_MESSAGE, iconkitkat);
            withdrawEuro2 = 0;
            withdrawEuro1 = 0;
            withdraw50Cent = 0;
            withdraw20Cent = 0;
            withdraw10Cent = 0;
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, the purchase can't be complite due to stock unavailabilty "
                    + "or the inserted money is not enough", "Purchase not complite", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonKitKatActionPerformed

    /**
     * Processes the purchase of a Mars chocolate bar. Validates sufficient
     * funds and stock availability, calculates change, and updates machine
     * inventory and coin counts accordingly.
     *
     * @param evt The action event triggered by clicking the "Mars" button
     */
    private void jButtonMarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMarsActionPerformed
        ImageIcon iconMars = new ImageIcon("./src/my/chocolateVendingMachine/mars2.png");
        if (moneyInserted >= 1.40 && marsAvb >= 1) {
            machineMoney += moneyInserted;
            double changeMars = moneyInserted - 1.40;
            changeMars = roundMoney(changeMars);
            moneyInserted = 0.0;
            jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
            machineMoney = roundMoney(machineMoney);
            JOptionPane.showMessageDialog(null, "Please take your change!" + "\n€" + String.format("%.2f", changeMars),
                    "Purchase complite", JOptionPane.INFORMATION_MESSAGE, iconChange);
            while (changeMars > 0) {
                if (changeMars >= 2.00 && euro2Coins > 0) {
                    changeMars -= 2.00;
                    euro2Coins--;
                    machineMoney -= 2.00;
                    changeMars = roundMoney(changeMars);

                } else if (changeMars >= 1.00 && euro1Coins > 0) {
                    changeMars -= 1.00;
                    euro1Coins--;
                    machineMoney -= 1.00;
                    changeMars = roundMoney(changeMars);

                } else if (changeMars >= 0.50 && c50Coins > 0) {
                    changeMars -= 0.50;
                    c50Coins--;
                    machineMoney -= 0.50;
                    changeMars = roundMoney(changeMars);

                } else if (changeMars >= 0.20 && c20Coins > 0) {
                    changeMars -= 0.20;
                    c20Coins--;
                    machineMoney -= 0.20;
                    changeMars = roundMoney(changeMars);

                } else if (changeMars >= 0.10 && c10Coins > 0) {
                    changeMars -= 0.10;
                    c10Coins--;
                    machineMoney -= 0.10;
                    changeMars = roundMoney(changeMars);

                } else {
                    break;
                }
            }
            machineMoney = roundMoney(machineMoney);
            marsAvb -= 1;
            jTextFieldMarsAv.setText(Integer.toString(marsAvb));
            JOptionPane.showMessageDialog(null, "Please collect your Mars, enjoy!",
                    "Purchase complete", JOptionPane.INFORMATION_MESSAGE, iconMars);
            withdrawEuro2 = 0;
            withdrawEuro1 = 0;
            withdraw50Cent = 0;
            withdraw20Cent = 0;
            withdraw10Cent = 0;
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, the purchase can't be complite due to stock unavailabilty "
                    + "or the inserted money is not enough", "Purchase not complite", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonMarsActionPerformed

    /**
     * Processes the purchase of a Kinder chocolate bar. Validates sufficient
     * funds and stock availability, calculates change, and updates machine
     * inventory and coin counts accordingly.
     *
     * @param evt The action event triggered by clicking the "Kinder" button
     */
    private void jButtonKinderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKinderActionPerformed
        ImageIcon iconKinder = new ImageIcon("./src/my/chocolateVendingMachine/kinder2.png");
        if (moneyInserted >= 1.60 && kinderAvb >= 1) {
            machineMoney += moneyInserted;
            double changeKinder = moneyInserted - 1.60;
            changeKinder = roundMoney(changeKinder);
            moneyInserted = 0.0;
            jTextFieldInsertedCoins.setText("€" + Double.toString(moneyInserted));
            machineMoney = roundMoney(machineMoney);
            JOptionPane.showMessageDialog(null, "Please take your change!" + "\n€" + String.format("%.2f", changeKinder),
                    "Purchase complite", JOptionPane.INFORMATION_MESSAGE, iconChange);
            while (changeKinder > 0) {
                if (changeKinder >= 2.00 && euro2Coins > 0) {
                    changeKinder -= 2.00;
                    euro2Coins--;
                    machineMoney -= 2.00;
                    changeKinder = roundMoney(changeKinder);

                } else if (changeKinder >= 1.00 && euro1Coins > 0) {
                    changeKinder -= 1.00;
                    euro1Coins--;
                    machineMoney -= 1.00;
                    changeKinder = roundMoney(changeKinder);

                } else if (changeKinder >= 0.50 && c50Coins > 0) {
                    changeKinder -= 0.50;
                    c50Coins--;
                    machineMoney -= 0.50;
                    changeKinder = roundMoney(changeKinder);

                } else if (changeKinder >= 0.20 && c20Coins > 0) {
                    changeKinder -= 0.20;
                    c20Coins--;
                    machineMoney -= 0.20;
                    changeKinder = roundMoney(changeKinder);

                } else if (changeKinder >= 0.10 && c10Coins > 0) {
                    changeKinder -= 0.10;
                    c10Coins--;
                    machineMoney -= 0.10;
                    changeKinder = roundMoney(changeKinder);

                } else {
                    break;
                }
            }
            machineMoney = roundMoney(machineMoney);
            kinderAvb -= 1;
            jTextFieldKinderAv.setText(Integer.toString(kinderAvb));
            JOptionPane.showMessageDialog(null, "Please collect your Kinder Bueno, enjoy!",
                    "Purchase complete", JOptionPane.INFORMATION_MESSAGE, iconKinder);
            withdrawEuro2 = 0;
            withdrawEuro1 = 0;
            withdraw50Cent = 0;
            withdraw20Cent = 0;
            withdraw10Cent = 0;
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, the purchase can't be complite due to stock unavailabilty "
                    + "or the inserted money is not enough", "Purchase not complite", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonKinderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10c;
    private javax.swing.JButton jButton20c;
    private javax.swing.JButton jButton50c;
    private javax.swing.JButton jButtonAddStock;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonKinder;
    private javax.swing.JButton jButtonKitKat;
    private javax.swing.JButton jButtonMars;
    private javax.swing.JButton jButtonTwix;
    private javax.swing.JButton jButtonWithdraw;
    private javax.swing.JButton jButton€1;
    private javax.swing.JButton jButton€2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelChooseProduct;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelInsertCoins;
    private javax.swing.JLabel jLabelKinderAv;
    private javax.swing.JLabel jLabelKinderPrice;
    private javax.swing.JLabel jLabelKitkatAv;
    private javax.swing.JLabel jLabelKitkatPrice;
    private javax.swing.JLabel jLabelMarsAv;
    private javax.swing.JLabel jLabelMarsPrice;
    private javax.swing.JLabel jLabelTwixAv;
    private javax.swing.JLabel jLabelTwixPrice;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextFieldInsertedCoins;
    public static javax.swing.JTextField jTextFieldKinderAv;
    public static javax.swing.JTextField jTextFieldKitkatAv;
    public static javax.swing.JTextField jTextFieldMarsAv;
    public static javax.swing.JTextField jTextFieldTwixAv;
    // End of variables declaration//GEN-END:variables
}
